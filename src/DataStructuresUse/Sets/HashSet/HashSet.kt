package DataStructuresUse.Sets.HashSet

fun _HashSet(){
    // إنشاء مجموعة فارغة من الأعداد الصحيحة
    val numbers = HashSet<Int>()

// إضافة عناصر إلى المجموعة
    numbers.add(10)
    numbers.add(20)
    numbers.add(30)
    numbers.add(20) // لن يتم إضافته لأن 20 موجود بالفعل

// التحقق من وجود عنصر
    if (numbers.contains(20)) {
        println("20 موجود في المجموعة")
    }

// طباعة المجموعة (الترتيب غير مضمون)
    println(numbers)
}

/*
ما هو HashSet؟
HashSet في كوتلن هي بنية بيانات تمثل مجموعة غير مرتبة من العناصر الفريدة. بمعنى آخر، لا يمكن أن يحتوي HashSet على عنصرين متطابقين. يتم استخدام HashSet عندما نحتاج إلى تخزين مجموعة من العناصر الفريدة ولا نهتم بترتيبها.

لماذا نستخدم HashSet؟
الفرادة: يضمن أن كل عنصر موجود مرة واحدة فقط.
السرعة: عمليات البحث والإضافة والحذف تتم بسرعة عالية.
عدم الترتيب: إذا لم يكن الترتيب مهماً، فإن HashSet هو الخيار الأمثل.


مزايا HashSet:
سرعة: عمليات البحث والإضافة والحذف تتم بسرعة ثابتة تقريبًا.
الفرادة: يضمن عدم تكرار العناصر.
البساطة: سهل الاستخدام والتفهم.
متى نستخدم HashSet؟
تخزين قيم فريدة: مثلاً، تخزين قائمة من أسماء المستخدمين الفريدة.
إزالة العناصر المكررة: يمكن استخدام HashSet لإزالة العناصر المكررة من قائمة.
تحقق من وجود عنصر: يمكن التحقق بسرعة من وجود عنصر معين في المجموعة.

ملاحظة هامة:
النوع العام: عند إنشاء HashSet، يجب تحديد نوع العناصر التي ستخزنها داخل الزوايا المعقولة (< >).
الوظائف العليا: يمكن استخدام الوظائف العليا مثل map و filter مع HashSet، ولكن النتيجة ستكون دائمًا مجموعة جديدة.
خلاصة:
HashSet هي أداة قوية في كوتلن لتخزين مجموعات من العناصر الفريدة. إذا كنت لا تحتاج إلى ترتيب محدد للعناصر وتريد ضمان عدم تكرارها، فإن HashSet هو الخيار الأمثل.
*/