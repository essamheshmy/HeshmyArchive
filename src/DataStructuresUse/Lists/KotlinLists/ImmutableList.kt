package DataStructuresUse.Lists.KotlinLists

fun _ImmutableList(){

    // إنشاء قائمة غير قابلة للتغيير من الأعداد الصحيحة
    val numbers: List<Int> = listOf(1, 2, 3, 4, 5)

// محاولة إضافة عنصر (لن تعمل)
// numbers.add(6) // سيؤدي إلى خطأ في التجميع

// محاولة حذف عنصر (لن تعمل)
// numbers.removeAt(0) // سيؤدي إلى خطأ في التجميع

// طباعة القائمة
    println(numbers) // يطبع [1, 2, 3, 4, 5]

}
/*
ImmutableList في كوتلن: قائمة غير قابلة للتغيير
ما هي ImmutableList؟
في كوتلن، ImmutableList هي قائمة لا يمكن تعديلها بعد إنشائها. بمعنى آخر، لا يمكنك إضافة عناصر جديدة إليها، ولا حذف عناصر موجودة، ولا تغيير قيمة أي عنصر. هذا يجعلها مثالية للحالات التي تحتاج فيها إلى ضمان عدم تغيير البيانات بعد إنشائها، مما يزيد من أمان وسلامة الكود.

لماذا نستخدم ImmutableList؟
الأمان: تمنع التعديلات غير المقصودة على البيانات، مما يقلل من فرص حدوث الأخطاء.
التعددية: يمكن مشاركة ImmutableList بأمان بين عدة خيوط دون الحاجة إلى قفلها.
الكفاءة: في بعض الحالات، يمكن لتحسينات المترجم أن تجعل العمليات على ImmutableList أكثر كفاءة.
كيف نستخدم ImmutableList؟
 */

/*
ملاحظات هامة:
إنشاء ImmutableList: يمكن إنشاء ImmutableList باستخدام الدالة listOf().
تحويل MutableList إلى ImmutableList: يمكن تحويل MutableList إلى ImmutableList باستخدام الدالة toList().
الوظائف العليا: يمكن استخدام الوظائف العليا مثل map و filter مع ImmutableList، ولكن النتيجة ستكون دائمًا ImmutableList جديد.
متى نستخدم ImmutableList؟
عندما نريد ضمان عدم تغيير البيانات بعد إنشائها.
عندما نشارك البيانات بين عدة أجزاء من الكود.
عندما نريد تحسين أمان الكود.
عندما نريد تجنب الأخطاء الناتجة عن التعديلات غير المقصودة.
خلاصة:

ImmutableList هي أداة قوية في كوتلن لضمان سلامة البيانات وزيادة كفاءة الكود. من خلال فهم ميزاتها واستخداماتها، يمكنك كتابة كود أكثر أمانًا وقابلية للصيانة.
*/