package DataStructuresUse.Lists.KotlinLists

fun _ArrayList(){
    // إنشاء قائمة فارغة من الأعداد الصحيحة
    val numbers = ArrayList<Int>()

// إضافة عناصر إلى القائمة
    numbers.add(10)
    numbers.add(20)
    numbers.add(30)

    // الوصول إلى عنصر
    val secondNumber = numbers[1] // يعطي 20

// طباعة جميع العناصر
    for (number in numbers) {
        println(number)
    }

// حذف عنصر
    numbers.removeAt(1) // حذف العنصر الثاني

// التحقق من وجود عنصر
    if (numbers.contains(30)) {
        println("30 موجود في القائمة")
    }

   // مثال على استخدام MutableList مع وظائف عليا:

// ضرب كل عنصر في 2
    val doubledNumbers = numbers.map { it * 2 }
    println(doubledNumbers) // يطبع [2, 4, 6, 8, 10]
// اختيار الأعداد الزوجية
    val evenNumbers = numbers.filter { it % 2 == 0 }
    println(evenNumbers) // يطبع [2, 4]
}
/*
ما هي ArrayList في كوتلن؟
ArrayList في كوتلن هي عبارة عن قائمة ديناميكية قابلة للتوسع، مما يعني أنه يمكنك إضافة عناصر إليها أو حذفها دون الحاجة إلى تحديد حجمها مسبقاً. تعتبر ArrayList واحدة من أكثر هياكل البيانات شيوعًا واستخدامًا في كوتلن، وذلك لمرونتها وسهولة استخدامها.

كيف تعمل ArrayList؟
التخزين: تخزن ArrayList عناصرها في مصفوفة داخلية. عندما تصل القائمة إلى سعتها القصوى، يتم توسيع هذه المصفوفة تلقائيًا لتوفير مساحة لعناصر جديدة.
الوصول إلى العناصر: يمكن الوصول إلى العناصر في ArrayList باستخدام مؤشراتها، حيث يبدأ المؤشر الأول من الصفر.
إضافة العناصر: يمكنك إضافة عناصر إلى نهاية القائمة أو في أي مكان محدد باستخدام الطرق المناسبة.
حذف العناصر: يمكنك حذف عناصر محددة أو مسح القائمة بالكامل.
متى تستخدم ArrayList؟
عندما تحتاج إلى تخزين مجموعة من العناصر التي قد تتغير حجمها بمرور الوقت.
عندما تحتاج إلى الوصول إلى العناصر باستخدام مؤشراتها.
عندما لا تحتاج إلى ترتيب خاص للعناصر.
مزايا ArrayList:
مرونة: يمكن تغيير حجمها بسهولة.
سرعة الوصول: الوصول إلى العناصر عن طريق المؤشرات سريع.
سهولة الاستخدام: توفر العديد من الطرق للتعامل مع العناصر.
نقاط ضعف ArrayList:
غير آمنة للخيوط: إذا كان لديك عدة خيوط تتعامل مع نفس القائمة، فقد تواجه مشاكل في التزامن.
هدر في الذاكرة: قد يتم هدر بعض الذاكرة عند توسيع المصفوفة الداخلية.
مقارنة ArrayList مع أنواع أخرى من القوائم في كوتلن:
MutableList: واجهة عامة للقوائم القابلة للتعديل، و ArrayList هي إحدى تنفيذاتها.
List: واجهة عامة للقوائم، بما في ذلك القوائم غير القابلة للتعديل.
نصائح إضافية:
النوع العام: عند إنشاء ArrayList، يجب تحديد نوع العناصر التي ستخزنها داخل الزوايا المعقولة (< >).
الوظائف العليا: يمكنك استخدام الوظائف العليا مثل map و filter و reduce مع ArrayList لتنفيذ عمليات معقدة بشكل أكثر إيجازًا.
ختامًا:

ArrayList هي أداة قوية ومرنة في كوتلن لتخزين وتنظيم البيانات. من خلال فهم كيفية عملها واستخداماتها، يمكنك كتابة كود أكثر كفاءة وفعالية.

ملخص
MutableList هي أداة قوية ومرنة في كوتلن لتخزين وتعديل مجموعات من البيانات. توفر مرونة كبيرة في التعامل مع البيانات وتدعم مجموعة واسعة من العمليات. عند اختيار نوع القائمة المناسبة، يجب مراعاة طبيعة البيانات التي ستخزنها والعمليات التي ستقوم بها عليها.

هل لديك أي أسئلة أخرى حول MutableList أو هياكل البيانات الأخرى في كوتلن؟

ملاحظات هامة:

النوع العام: عند إنشاء MutableList، يجب تحديد نوع العناصر التي ستخزنها داخل الزوايا المعقولة (< >).
التحولات: يمكن تحويل MutableList إلى أنواع أخرى من القوائم أو المجموعات باستخدام الوظائف المناسبة.
الآمان: يجب توخي الحذر عند استخدام MutableList في بيئات متعددة الخيوط، حيث قد تحدث مشاكل في التزامن.
 */