package DataStructuresUse.Lists.JavaLists;

import java.util.PriorityQueue;

public class _PriorityQueue {
    public static void priorityQueue(){
        PriorityQueue<Integer> pq = new PriorityQueue<>();

        pq.add(3);

        pq.add(1);
        pq.add(5);
        pq.add(2);

        // استخراج العناصر بترتيب تصاعدي (الأقل أولوية أولاً)
        while (!pq.isEmpty()) {
            System.out.print(pq.poll() + " ");

    }
}}

/*
PriorityQueue في جافا هي بنية بيانات تعمل على تخزين عناصر مرتبة بناءً على أولوية معينة. بمعنى آخر، هي نوع خاص من القوائم حيث يتم استخراج العنصر ذو أعلى (أو أقل) أولوية أولاً.

لماذا نستخدم PriorityQueue؟
الوصول السريع إلى العنصر ذي أعلى/أقل أولوية: إذا كنت بحاجة باستمرار إلى الحصول على العنصر الأكثر أهمية أو الأقل أهمية، فإن PriorityQueue هي الخيار الأمثل.
تنفيذ خوارزميات مثل Dijkstra's algorithm: تستخدم PriorityQueue بشكل واسع في خوارزميات البحث عن أقصر مسار مثل خوارزمية Dijkstra.
تنفيذ عمليات الجدولة: يمكن استخدامها لتنفيذ عمليات الجدولة حيث يتم تنفيذ المهام ذات الأولوية الأعلى أولاً.
كيف تعمل PriorityQueue؟
تعتمد PriorityQueue على هيكل بيانات يسمى heap لتنفيذ عملية الترتيب. عادة ما تستخدم heap ثنائي (binary heap) لتنفيذ PriorityQueue في جافا. يتم تحديد أولوية كل عنصر من خلال مقارن (comparator) يحدد أي عنصرين لهما أولوية أعلى.

متى نستخدم PriorityQueue؟
خوارزميات البحث: في خوارزميات البحث مثل A* و Dijkstra's algorithm.
جدولة المهام: لتنفيذ المهام ذات الأولوية الأعلى أولاً.
تنفيذ خوارزميات التجميع: في خوارزميات مثل Huffman coding.

في هذا المثال:

قمنا بإنشاء PriorityQueue لتخزين أعداد صحيحة.
أضفنا بعض الأعداد إلى PriorityQueue.
استخدمنا poll() لاستخراج العناصر بترتيب تصاعدي.
نقاط هامة حول PriorityQueue:
الترتيب: يمكن تحديد الترتيب إما تصاعديًا أو تنازليًا باستخدام مقارن مخصص.
null: لا يسمح بإضافة قيمة null إلى PriorityQueue.
تعديل الأولويات: يمكن تعديل أولوية عنصر موجود، ولكن هذا يتطلب إعادة ترتيب الهيكل الداخلي لـ PriorityQueue


 مقارنة بين PriorityQueue و HashSet و HashMap:
الميزة	PriorityQueue	HashSet	HashMap
الترتيب	مرتب بناءً على الأولوية	غير مرتب	غير مرتب
الفرادة	يسمح بالتكرار	لا يسمح بالتكرار	لا يسمح بتكرار المفاتيح
الوصول	الوصول السريع إلى العنصر ذي أعلى/أقل أولوية	الوصول السريع بناءً على المفتاح	الوصول السريع بناءً على المفتاح
*/