package DataStructuresUse.Lists.JavaLists;

import java.util.Vector;

public class _Vector {
    public static void vector(){
        Vector<String> fruits = new Vector<>();
        fruits.add("تفاح");
        fruits.add("موز");
        fruits.add("عنب");

        System.out.println(fruits);

    }
}
/*
الـ Vector في جافا هي بنية بيانات ديناميكية تستخدم لتخزين مجموعة من العناصر. يمكن اعتبارها قائمة مرتبة من العناصر، حيث يمكن إضافة عناصر جديدة وحذفها وتعديلها. على عكس المصفوفات، لا يحتاج الـ Vector إلى تحديد حجمه مسبقًا، فهو يتمدد تلقائيًا عند إضافة عناصر جديدة.

لماذا نستخدم الـ Vector؟

التخزين الديناميكي: يمكن إضافة عناصر جديدة إلى الـ Vector في أي وقت، مما يجعله مرنًا في التعامل مع البيانات المتغيرة.
الوصول العشوائي: يمكن الوصول إلى أي عنصر في الـ Vector باستخدام فهرسه.
العمليات الأساسية: يدعم الـ Vector مجموعة واسعة من العمليات مثل إضافة عناصر، حذف عناصر، البحث عن عناصر، وفرز العناصر.
كيف يعمل الـ Vector؟

النمو: عندما يصبح الـ Vector ممتلئًا، يتم تخصيص مساحة ذاكرة جديدة أكبر تلقائيًا، ويتم نسخ العناصر الموجودة إلى المساحة الجديدة.
التزامن: الـ Vector هو كائن متزامن (synchronized)، مما يعني أنه يمكن استخدامه بأمان في بيئات متعددة الخيوط دون الحاجة إلى قفل (lock) إضافي.
الوراثة: يعتبر الـ Vector فئة قديمة، ويرث من فئة Vector التي تم إهمالها في الإصدارات الحديثة من جافا.
متى نستخدم الـ Vector؟

التطبيقات القديمة: إذا كنت تعمل على مشروع قديم يستخدم الـ Vector، فستحتاج إلى فهم كيفية التعامل معه.
البيئات المتعددة الخيوط: إذا كنت بحاجة إلى بنية بيانات متزامنة بشكل مضمون.
لماذا لا يُفضل استخدام الـ Vector في الإصدارات الحديثة من جافا؟

الأداء: عمليات النمو المتكررة للـ Vector يمكن أن تؤثر على أداء التطبيق، خاصة عند التعامل مع كميات كبيرة من البيانات.
التزامن غير الضروري: في العديد من الحالات، لا يكون التزامن الضمني للـ Vector ضروريًا، مما يؤدي إلى إبطاء الأداء.
وجود بدائل أفضل: توجد بدائل أفضل للـ Vector مثل ArrayList وLinkedList، والتي توفر أداءً أفضل ومرونة أكبر.
بدائل للـ Vector:

ArrayList: تشبه الـ Vector ولكنها ليست متزامنة، مما يجعلها أسرع في معظم الحالات.
LinkedList: مناسبة للعمليات التي تتضمن إدراج وحذف عناصر في منتصف القائمة.


 خلاصة

الـ Vector هو بنية بيانات قديمة في جافا، وعلى الرغم من أنه لا يزال يعمل، إلا أنه يُفضل تجنب استخدامه في المشاريع الجديدة لصالح بدائل أكثر حداثة وكفاءة مثل ArrayList وLinkedList.
*/