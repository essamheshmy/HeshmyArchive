package DataStructuresUse.Maps.TreeMap

import java.util.TreeMap

fun _TreeMap(){
    // إنشاء TreeMap لتخزين أسماء الأشخاص وأعمارهم (الترتيب حسب الاسم)
    val ages = TreeMap<String, Int>()

// إضافة عناصر
    ages["علي"] = 30
    ages["خالد"] = 25
    ages["فهد"] = 35

// طباعة العناصر (ستكون مرتبة أبجديًا حسب الاسم)
    for ((name, age) in ages) {
        println("$name is $age years old")
    }

}
/*
TreeMap في كوتلن: مجموعة مرتبة بناءً على مفاتيحها
ما هي TreeMap؟
TreeMap في كوتلن هي بنية بيانات تعمل على تخزين أزواج من المفتاح والقيمة (key-value pairs) حيث يتم ترتيب هذه الأزواج بناءً على قيمة المفتاح بشكل تصاعدي. بمعنى آخر، TreeMap هي نسخة مرتبة من HashMap.

لماذا نستخدم TreeMap؟
الترتيب التلقائي: يتم ترتيب العناصر في TreeMap تلقائيًا بناءً على قيمة المفتاح، مما يسهل عمليات البحث والتصفية.
الوصول السريع: يمكن الوصول إلى عنصر بناءً على مفتاحه بسرعة باستخدام خوارزميات البحث الثنائية.
الفرادة: لا يسمح بتكرار المفاتيح.
العمليات على مجموعة مرتبة: يمكن إجراء عمليات مثل الحصول على أصغر أو أكبر عنصر، أو الحصول على مجموعة فرعية من العناصر بناءً على نطاق معين.
كيف تعمل TreeMap؟
TreeMap تستخدم شجرة بحث ثنائية (Binary Search Tree) لتنظيم العناصر. يتم مقارنة كل مفتاح جديد بالمفاتيح الموجودة في الشجرة لتحديد مكانه الصحيح.


TreeMap في كوتلن: مجموعة مرتبة بناءً على مفاتيحها
ما هي TreeMap؟
TreeMap في كوتلن هي بنية بيانات تعمل على تخزين أزواج من المفتاح والقيمة (key-value pairs) حيث يتم ترتيب هذه الأزواج بناءً على قيمة المفتاح بشكل تصاعدي. بمعنى آخر، TreeMap هي نسخة مرتبة من HashMap.

لماذا نستخدم TreeMap؟
الترتيب التلقائي: يتم ترتيب العناصر في TreeMap تلقائيًا بناءً على قيمة المفتاح، مما يسهل عمليات البحث والتصفية.
الوصول السريع: يمكن الوصول إلى عنصر بناءً على مفتاحه بسرعة باستخدام خوارزميات البحث الثنائية.
الفرادة: لا يسمح بتكرار المفاتيح.
العمليات على مجموعة مرتبة: يمكن إجراء عمليات مثل الحصول على أصغر أو أكبر عنصر، أو الحصول على مجموعة فرعية من العناصر بناءً على نطاق معين.
كيف تعمل TreeMap؟
TreeMap تستخدم شجرة بحث ثنائية (Binary Search Tree) لتنظيم العناصر. يتم مقارنة كل مفتاح جديد بالمفاتيح الموجودة في الشجرة لتحديد مكانه الصحيح.

مثال على استخدام TreeMap:
Kotlin
// إنشاء TreeMap لتخزين أسماء الأشخاص وأعمارهم (الترتيب حسب الاسم)
val ages = TreeMap<String, Int>()

// إضافة عناصر
ages["علي"] = 30
ages["خالد"] = 25
ages["فهد"] = 35

// طباعة العناصر (ستكون مرتبة أبجديًا حسب الاسم)
for ((name, age) in ages) {
    println("$name is $age years old")
}
يُرجى استخدام الرمز البرمجي بحذر.

مقارنة بين TreeMap و HashMap و LinkedHashMap:
الميزة	HashMap	LinkedHashMap	TreeMap
الترتيب	غير مرتب	يحافظ على ترتيب الإضافة	مرتب حسب المفتاح
الفرادة	لا يسمح بتكرار المفاتيح	لا يسمح بتكرار المفاتيح	لا يسمح بتكرار المفاتيح
الأداء	أسرع بشكل عام	أبطأ قليلاً من HashMap	أبطأ قليلاً من HashMap ولكن يوفر ترتيبًا
الاستخدامات	عندما لا يهم الترتيب	عندما تحتاج إلى الحفاظ على ترتيب الإضافة	عندما تحتاج إلى ترتيب طبيعي للبيانات أو عمليات بحث متكررة

TreeMap في كوتلن: مجموعة مرتبة بناءً على مفاتيحها
ما هي TreeMap؟
TreeMap في كوتلن هي بنية بيانات تعمل على تخزين أزواج من المفتاح والقيمة (key-value pairs) حيث يتم ترتيب هذه الأزواج بناءً على قيمة المفتاح بشكل تصاعدي. بمعنى آخر، TreeMap هي نسخة مرتبة من HashMap.

لماذا نستخدم TreeMap؟
الترتيب التلقائي: يتم ترتيب العناصر في TreeMap تلقائيًا بناءً على قيمة المفتاح، مما يسهل عمليات البحث والتصفية.
الوصول السريع: يمكن الوصول إلى عنصر بناءً على مفتاحه بسرعة باستخدام خوارزميات البحث الثنائية.
الفرادة: لا يسمح بتكرار المفاتيح.
العمليات على مجموعة مرتبة: يمكن إجراء عمليات مثل الحصول على أصغر أو أكبر عنصر، أو الحصول على مجموعة فرعية من العناصر بناءً على نطاق معين.
كيف تعمل TreeMap؟
TreeMap تستخدم شجرة بحث ثنائية (Binary Search Tree) لتنظيم العناصر. يتم مقارنة كل مفتاح جديد بالمفاتيح الموجودة في الشجرة لتحديد مكانه الصحيح.

مثال على استخدام TreeMap:
Kotlin
// إنشاء TreeMap لتخزين أسماء الأشخاص وأعمارهم (الترتيب حسب الاسم)
val ages = TreeMap<String, Int>()

// إضافة عناصر
ages["علي"] = 30
ages["خالد"] = 25
ages["فهد"] = 35

// طباعة العناصر (ستكون مرتبة أبجديًا حسب الاسم)
for ((name, age) in ages) {
    println("$name is $age years old")
}
يُرجى استخدام الرمز البرمجي بحذر.

مقارنة بين TreeMap و HashMap و LinkedHashMap:
الميزة	HashMap	LinkedHashMap	TreeMap
الترتيب	غير مرتب	يحافظ على ترتيب الإضافة	مرتب حسب المفتاح
الفرادة	لا يسمح بتكرار المفاتيح	لا يسمح بتكرار المفاتيح	لا يسمح بتكرار المفاتيح
الأداء	أسرع بشكل عام	أبطأ قليلاً من HashMap	أبطأ قليلاً من HashMap ولكن يوفر ترتيبًا
الاستخدامات	عندما لا يهم الترتيب	عندما تحتاج إلى الحفاظ على ترتيب الإضافة	عندما تحتاج إلى ترتيب طبيعي للبيانات أو عمليات بحث متكررة

التصدير إلى "جداول بيانات Google"
متى نستخدم TreeMap؟
البيانات المرتبة: عندما نحتاج إلى مجموعة مرتبة بشكل طبيعي (مثل الأعداد، الأحرف الأبجدية).
البيانات الفريدة: عندما نريد ضمان عدم وجود عناصر مكررة.
عمليات البحث المتكررة: إذا كنا سنقوم بعمليات بحث متكررة في المجموعة، فإن TreeMap تكون فعالة بسبب الترتيب.
الحصول على أصغر أو أكبر عنصر: يمكن استخدام TreeMap للحصول بسهولة على أصغر أو أكبر عنصر بناءً على المفتاح.
خلاصة
TreeMap هي أداة قوية في كوتلن لتخزين مجموعات مرتبة من الأزواج المفتاح-القيمة. إنها مفيدة بشكل خاص عندما تحتاج إلى ترتيب طبيعي للبيانات أو عندما تحتاج إلى إجراء عمليات بحث متكررة.

هل لديك أي أسئلة أخرى حول TreeMap أو هياكل البيانات الأخرى في كوتلن؟

ملاحظات إضافية:

الوظائف العليا: يمكن استخدام الوظائف العليا مثل map و filter مع TreeMap.
الترتيب المخصص: يمكن تخصيص ترتيب العناصر في TreeMap باستخدام مقارنة مخصصة.
الأداء: بشكل عام، يكون أداء TreeMap أبطأ قليلاً من HashMap و LinkedHashMap بسبب الحاجة إلى الحفاظ على الترتيب.
 */