package DataStructuresUse.Maps.HashMap;

import java.util.HashMap;
import java.util.Map;

public class _HashMap {
    public static void hashMap(){
        Map<String, String> hashMap = new HashMap<>();
                HashMap<String, Integer> ages = new HashMap<>();
                ages.put("علي", 30);
                ages.put("خالد", 25);
                ages.put("فهد", 35);

                // الحصول على عمر علي
                int ageOfAli = ages.get("علي");
                System.out.println("عمر علي هو: " + ageOfAli);
/*
في هذا المثال:

أنشأنا HashMap لتخزين أسماء الأشخاص وأعمارهم.
أضفنا ثلاثة عناصر إلى HashMap باستخدام الطريقة put().
استخدمنا الطريقة get() للحصول على عمر علي.
 */
    }
}
/*

شرح HashMap في جافا
ما هي HashMap؟
HashMap في جافا هي بنية بيانات تستخدم لتخزين أزواج من المفتاح والقيمة (key-value pairs). بمعنى آخر، هي عبارة عن جدول حيث كل عنصر فيه يحتوي على مفتاح فريد يقترن بقيمة معينة. هذا المفتاح يعمل كمرجع للوصول إلى القيمة المقابلة له.

مثال: تخيل كتابًا يحتوي على فهرس. كل كلمة في الفهرس (المفتاح) تشير إلى الصفحة التي توجد فيها هذه الكلمة (القيمة). هذا هو بالضبط ما تفعله HashMap.

لماذا نستخدم HashMap؟
الوصول السريع: يمكنك الوصول إلى أي قيمة بشكل مباشر إذا كنت تعرف مفتاحها.
التخزين الفريد للمفاتيح: لا يمكن أن يكون هناك مفتاحان متطابقان في HashMap.
المرونة: يمكنك استخدام أي نوع من البيانات كمفتاح أو قيمة.
كيف تعمل HashMap؟
الهاش: عندما تضيف عنصرًا إلى HashMap، يتم حساب قيمة هاش (hash code) للمفتاح. هذه القيمة الهاش تستخدم لتحديد المكان الذي سيتم تخزين العنصر فيه.
التصادم: في بعض الأحيان، قد يتم حساب نفس قيمة الهاش لمفتاحين مختلفين. هذا ما يسمى التصادم. HashMap تستخدم طرق خاصة لحل هذه التصادمات.
متى نستخدم HashMap؟
تخزين البيانات المرتبطة: عندما تريد تخزين بيانات مرتبطة ببعضها البعض، مثل أسماء المستخدمين وكلمات السر.
الوصول السريع إلى البيانات: عندما تحتاج إلى الوصول إلى البيانات بسرعة بناءً على مفتاح معين.
تحويل البيانات: يمكن استخدام HashMap لتحويل البيانات من شكل إلى آخر.

مزايا HashMap:
سرعة الوصول: عمليات البحث والإضافة والحذف تتم بسرعة عالية.
المرونة: يمكن استخدام أي نوع من البيانات كمفتاح أو قيمة.
سهولة الاستخدام: توفر العديد من الوظائف المفيدة للتعامل مع البيانات.
نقاط ضعف HashMap:
غير مرتب: لا يضمن ترتيب العناصر في HashMap. إذا كنت بحاجة إلى الحفاظ على الترتيب، يمكنك استخدام LinkedHashMap.
التصادم: على الرغم من أن HashMap تستخدم طرقًا لحل التصادم، إلا أنه قد يؤثر على أداء HashMap في بعض الحالات.
خلاصة
HashMap هي أداة قوية في جافا لتخزين البيانات المرتبطة. إذا كنت بحاجة إلى الوصول السريع إلى البيانات بناءً على مفتاح فريد، فإن HashMap هي الخيار الأمثل.
 */
