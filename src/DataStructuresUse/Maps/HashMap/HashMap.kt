package DataStructuresUse.Maps.HashMap

fun _HashMap(){
    // إنشاء HashMap لتخزين أسماء الأشخاص وأعمارهم
    val ages = HashMap<String, Int>()

// إضافة عناصر
    ages["علي"] = 30
    ages["خالد"] = 25
    ages["فهد"] = 35

// الحصول على قيمة
    val ageOfAli = ages["علي"] // يعطي 30

// طباعة جميع العناصر
    for ((name, age) in ages) {
        println("$name is $age years old")
    }

}

/*
ما هي HashMap؟
HashMap في كوتلن هي بنية بيانات تستخدم لتخزين أزواج من المفتاح والقيمة (key-value pairs). كل عنصر في HashMap يتكون من مفتاح فريد يقترن بقيمة معينة. يتم استخدام HashMap عندما نريد الوصول إلى البيانات بسرعة بناءً على مفتاح معين.

لماذا نستخدم HashMap؟
الوصول السريع: يمكن الوصول إلى قيمة ما بناءً على مفتاحها بشكل سريع للغاية.
التخزين الفريد للمفاتيح: لا يمكن أن يكون هناك مفتاحان متطابقان في HashMap.
المرونة: يمكن استخدام أي نوع من البيانات كمفتاح أو قيمة.
كيف تعمل HashMap؟
المفتاح: يتم حساب قيمة هاش (hash code) للمفتاح، وتستخدم هذه القيمة لتحديد مكان تخزين القيمة في الـ HashMap.
التصادم: إذا تم حساب نفس قيمة الهاش لمفتاحين مختلفين، فإن الـ HashMap تستخدم طرق خاصة لحل هذا التصادم.
الوصول: عندما نريد الحصول على قيمة معينة، يتم حساب قيمة هاش للمفتاح، ثم يتم البحث عن القيمة في المكان المقابل لهذه القيمة الهاش.

HashMap في كوتلن: شرح مفصل مع أمثلة
ما هي HashMap؟
HashMap في كوتلن هي بنية بيانات تستخدم لتخزين أزواج من المفتاح والقيمة (key-value pairs). كل عنصر في HashMap يتكون من مفتاح فريد يقترن بقيمة معينة. يتم استخدام HashMap عندما نريد الوصول إلى البيانات بسرعة بناءً على مفتاح معين.

لماذا نستخدم HashMap؟
الوصول السريع: يمكن الوصول إلى قيمة ما بناءً على مفتاحها بشكل سريع للغاية.
التخزين الفريد للمفاتيح: لا يمكن أن يكون هناك مفتاحان متطابقان في HashMap.
المرونة: يمكن استخدام أي نوع من البيانات كمفتاح أو قيمة.
كيف تعمل HashMap؟
المفتاح: يتم حساب قيمة هاش (hash code) للمفتاح، وتستخدم هذه القيمة لتحديد مكان تخزين القيمة في الـ HashMap.
التصادم: إذا تم حساب نفس قيمة الهاش لمفتاحين مختلفين، فإن الـ HashMap تستخدم طرق خاصة لحل هذا التصادم.
الوصول: عندما نريد الحصول على قيمة معينة، يتم حساب قيمة هاش للمفتاح، ثم يتم البحث عن القيمة في المكان المقابل لهذه القيمة الهاش.
مثال على استخدام HashMap:
Kotlin
// إنشاء HashMap لتخزين أسماء الأشخاص وأعمارهم
val ages = HashMap<String, Int>()

// إضافة عناصر
ages["علي"] = 30
ages["خالد"] = 25
ages["فهد"] = 35

// الحصول على قيمة
val ageOfAli = ages["علي"] // يعطي 30

// طباعة جميع العناصر
for ((name, age) in ages) {
    println("$name is $age years old")
}
يُرجى استخدام الرمز البرمجي بحذر.

مزايا HashMap:
سرعة الوصول: عمليات البحث والإضافة والحذف تتم بسرعة عالية.
المرونة: يمكن استخدام أي نوع من البيانات كمفتاح أو قيمة.
سهولة الاستخدام: توفر العديد من الوظائف المفيدة للتعامل مع البيانات.
متى نستخدم HashMap؟
تخزين البيانات المرتبطة: عندما نريد تخزين بيانات مرتبطة ببعضها البعض، مثل أسماء المستخدمين وكلمات السر.
الوصول السريع إلى البيانات: عندما نحتاج إلى الوصول إلى البيانات بسرعة بناءً على مفتاح معين.
تحويل البيانات: يمكن استخدام HashMap لتحويل البيانات من شكل إلى آخر.

HashMap في كوتلن: شرح مفصل مع أمثلة
ما هي HashMap؟
HashMap في كوتلن هي بنية بيانات تستخدم لتخزين أزواج من المفتاح والقيمة (key-value pairs). كل عنصر في HashMap يتكون من مفتاح فريد يقترن بقيمة معينة. يتم استخدام HashMap عندما نريد الوصول إلى البيانات بسرعة بناءً على مفتاح معين.

لماذا نستخدم HashMap؟
الوصول السريع: يمكن الوصول إلى قيمة ما بناءً على مفتاحها بشكل سريع للغاية.
التخزين الفريد للمفاتيح: لا يمكن أن يكون هناك مفتاحان متطابقان في HashMap.
المرونة: يمكن استخدام أي نوع من البيانات كمفتاح أو قيمة.
كيف تعمل HashMap؟
المفتاح: يتم حساب قيمة هاش (hash code) للمفتاح، وتستخدم هذه القيمة لتحديد مكان تخزين القيمة في الـ HashMap.
التصادم: إذا تم حساب نفس قيمة الهاش لمفتاحين مختلفين، فإن الـ HashMap تستخدم طرق خاصة لحل هذا التصادم.
الوصول: عندما نريد الحصول على قيمة معينة، يتم حساب قيمة هاش للمفتاح، ثم يتم البحث عن القيمة في المكان المقابل لهذه القيمة الهاش.
مثال على استخدام HashMap:
Kotlin
// إنشاء HashMap لتخزين أسماء الأشخاص وأعمارهم
val ages = HashMap<String, Int>()

// إضافة عناصر
ages["علي"] = 30
ages["خالد"] = 25
ages["فهد"] = 35

// الحصول على قيمة
val ageOfAli = ages["علي"] // يعطي 30

// طباعة جميع العناصر
for ((name, age) in ages) {
    println("$name is $age years old")
}
يُرجى استخدام الرمز البرمجي بحذر.

مزايا HashMap:
سرعة الوصول: عمليات البحث والإضافة والحذف تتم بسرعة عالية.
المرونة: يمكن استخدام أي نوع من البيانات كمفتاح أو قيمة.
سهولة الاستخدام: توفر العديد من الوظائف المفيدة للتعامل مع البيانات.
متى نستخدم HashMap؟
تخزين البيانات المرتبطة: عندما نريد تخزين بيانات مرتبطة ببعضها البعض، مثل أسماء المستخدمين وكلمات السر.
الوصول السريع إلى البيانات: عندما نحتاج إلى الوصول إلى البيانات بسرعة بناءً على مفتاح معين.
تحويل البيانات: يمكن استخدام HashMap لتحويل البيانات من شكل إلى آخر.
مقارنة HashMap بـ ArrayList:
الميزة	HashMap	ArrayList
الترتيب	غير مرتب (بناءً على قيمة الهاش)	مرتب حسب ترتيب الإضافة
الوصول	سريع بالاستناد إلى المفتاح	بطيء نسبيًا (يحتاج إلى البحث التسلسلي)
التكرار	لا يسمح بتكرار المفاتيح	يسمح بتكرار العناصر

التصدير إلى "جداول بيانات Google"
خلاصة
HashMap هي أداة قوية في كوتلن لتخزين البيانات المرتبطة. إذا كنت بحاجة إلى الوصول السريع إلى البيانات بناءً على مفتاح فريد، فإن HashMap هي الخيار الأمثل.

هل لديك أي أسئلة أخرى حول HashMap أو هياكل البيانات الأخرى في كوتلن؟

ملاحظات إضافية:

الوظائف العليا: يمكن استخدام الوظائف العليا مثل map و filter مع HashMap.
التصادم: يجب اختيار نوع البيانات للمفتاح بعناية لتقليل احتمالية حدوث التصادم.
الأنواع القابلة للتغيير وغير القابلة للتغيير: هناك نوعان من HashMap: HashMap (قابل للتغيير) و Map (غير قابل للتغيير).
 */